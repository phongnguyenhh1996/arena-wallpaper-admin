{"version":3,"sources":["components/categories/CategoryList.js","constants/api.js","components/categories/CategoryCreate.js","authProvider.js","App.js","serviceWorker.js","index.js"],"names":["CategoryList","props","List","Datagrid","TextField","source","ImageField","title","API_URL","SaveWithNoteButton","handleSubmitWithRedirect","form","useForm","handleClick","useCallback","a","data","FormData","imagedata","getFieldState","value","rawFile","append","fetch","method","headers","authorization","localStorage","getItem","body","then","response","json","res","change","SaveButton","PostCreateToolbar","Toolbar","label","redirect","submitOnEnter","CategoryCreate","Create","SimpleForm","toolbar","TextInput","ImageInput","accept","placeholder","authProvider","login","username","password","request","Request","JSON","stringify","Headers","status","Error","statusText","token","setItem","logout","removeItem","Promise","resolve","checkAuth","reject","checkError","error","getPermissions","params","dataProvider","jsonServerProvider","url","options","Accept","set","fetchUtils","fetchJson","App","Admin","Resource","name","list","create","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.73baa246.chunk.js","sourcesContent":["import React from 'react';\nimport { List, Datagrid, TextField, ImageField } from 'react-admin';\n\nexport const CategoryList = (props) => (\n    <List {...props}>\n        <Datagrid>\n            <TextField source=\"id\" />\n            <TextField source=\"name\" />\n            <TextField source=\"createdDate\" />\n            <TextField source=\"viewCount\" />\n            <ImageField source=\"imageUrl.data.imageUrl\" title=\"Image\" />\n        </Datagrid>\n    </List>\n);","export const API_URL = process.env.NODE_ENV === 'production' ? 'https://us-central1-arenawallpaper.cloudfunctions.net/api' : 'http://localhost:5000/arenawallpaper/us-central1/api'","import React, {useCallback} from 'react';\nimport { Create, SimpleForm, TextInput, SaveButton, Toolbar,  ImageInput, ImageField } from 'react-admin';\nimport { useForm } from 'react-final-form';\nimport { API_URL } from '../../constants/api';\n\nconst SaveWithNoteButton = ({ handleSubmitWithRedirect, ...props }) => {\n\n    const form = useForm();\n  \n    const handleClick = useCallback(async () => {\n        const data = new FormData();\n        const imagedata = form.getFieldState('imageUrl').value.rawFile;\n        data.append('image', imagedata);\n        let res = await fetch(API_URL + '/media', {\n            method: \"POST\",\n            headers: {\n                authorization: 'Bearer ' + localStorage.getItem('token')\n            },\n            body: data\n        }).then(response => response.json())\n        form.change('imageUrl', res)\n        handleSubmitWithRedirect('list');\n    }, [form, handleSubmitWithRedirect]);\n  \n    return <SaveButton {...props} handleSubmitWithRedirect={handleClick} />;\n};\n\nconst PostCreateToolbar = props => (\n    <Toolbar {...props} >\n        <SaveWithNoteButton\n            label=\"Custom Save\"\n            redirect=\"list\"\n            submitOnEnter={false}\n        />\n    </Toolbar>\n);\n\nexport const CategoryCreate = (props) => (\n    <Create {...props}>\n        <SimpleForm toolbar={<PostCreateToolbar />}>\n            <TextInput source=\"name\" />\n            <ImageInput source=\"imageUrl\" label=\"Related pictures\" accept=\"image/*\" placeholder={<p>Drop your file here</p>}>\n                <ImageField source=\"src\" title=\"title\" />\n            </ImageInput>\n        </SimpleForm>\n    </Create>\n);","import { API_URL } from './constants/api'\n\nconst authProvider = {\n  login: ({ username, password }) =>  {\n      const request = new Request(API_URL + '/login?isAdmin=true', {\n          method: 'POST',\n          body: JSON.stringify({ username, password }),\n          headers: new Headers({ 'Content-Type': 'application/json' }),\n      });\n      return fetch(request)\n          .then(response => {\n              if (response.status < 200 || response.status >= 300) {\n                  throw new Error(response.statusText);\n              }\n              return response.json();\n          })\n          .then(({ token }) => {\n              localStorage.setItem('token', token);\n          });\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    return Promise.resolve();\n  },\n  checkAuth: () => localStorage.getItem('token')\n        ? Promise.resolve()\n        : Promise.reject(),\n  checkError: (error) => {\n    const status = error.status;\n    if (status === 401 || status === 403) {\n        localStorage.removeItem('token');\n        return Promise.reject();\n    }\n    return Promise.resolve();\n  },\n  getPermissions: params => Promise.resolve(),\n};\n\nexport default authProvider;","import React from 'react';\nimport { Admin, Resource, fetchUtils } from 'react-admin';\nimport jsonServerProvider from 'ra-data-json-server';\nimport { CategoryList, CategoryCreate } from './components/categories'\nimport authProvider from './authProvider'\nimport { API_URL } from './constants/api'\n\nconst httpClient = (url, options = {}) => {\n  if (!options.headers) {\n      options.headers = new Headers({ Accept: 'application/json' });\n  }\n  const token = localStorage.getItem('token');\n  options.headers.set('Authorization', `Bearer ${token}`);\n  return fetchUtils.fetchJson(url, options);\n}\n\nconst dataProvider = jsonServerProvider(API_URL, httpClient);\n\nconst App = () => (\n  <Admin dataProvider={dataProvider} authProvider={authProvider} >\n    <Resource name=\"categories\" list={CategoryList} create={CategoryCreate}/>\n  </Admin>  \n)\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}