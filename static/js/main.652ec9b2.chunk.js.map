{"version":3,"sources":["components/CategoryList.js","constants/api.js","authProvider.js","App.js","serviceWorker.js","index.js"],"names":["CategoryList","props","List","Datagrid","TextField","source","API_URL","authProvider","login","username","password","request","Request","method","body","JSON","stringify","headers","Headers","fetch","then","response","status","Error","statusText","json","token","localStorage","setItem","logout","removeItem","Promise","resolve","checkAuth","getItem","reject","checkError","error","getPermissions","params","dataProvider","jsonServerProvider","App","Admin","Resource","name","list","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"6SAGaA,EAAe,SAACC,GAAD,OACxB,kBAACC,EAAA,EAASD,EACN,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWC,OAAO,OAClB,kBAACD,EAAA,EAAD,CAAWC,OAAO,SAClB,kBAACD,EAAA,EAAD,CAAWC,OAAO,gBAClB,kBAACD,EAAA,EAAD,CAAWC,OAAO,cCTjBC,EAAkD,4DCsChDC,EApCM,CACnBC,MAAO,YAA8B,IAA3BC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,SACVC,EAAU,IAAIC,QAAQN,EAAU,sBAAuB,CACzDO,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEP,WAAUC,aACjCO,QAAS,IAAIC,QAAQ,CAAE,eAAgB,uBAE3C,OAAOC,MAAMR,GACRS,MAAK,SAAAC,GACF,GAAIA,EAASC,OAAS,KAAOD,EAASC,QAAU,IAC5C,MAAM,IAAIC,MAAMF,EAASG,YAE7B,OAAOH,EAASI,UAEnBL,MAAK,YAAgB,IAAbM,EAAY,EAAZA,MACLC,aAAaC,QAAQ,QAASF,OAG1CG,OAAQ,WAEN,OADAF,aAAaG,WAAW,SACjBC,QAAQC,WAEjBC,UAAW,kBAAMN,aAAaO,QAAQ,SAC9BH,QAAQC,UACRD,QAAQI,UAChBC,WAAY,SAACC,GACX,IAAMf,EAASe,EAAMf,OACrB,OAAe,MAAXA,GAA6B,MAAXA,GAClBK,aAAaG,WAAW,SACjBC,QAAQI,UAEZJ,QAAQC,WAEjBM,eAAgB,SAAAC,GAAM,OAAIR,QAAQC,YC5B9BQ,EAAeC,YAAmBnC,GAQzBoC,EANH,kBACV,kBAACC,EAAA,EAAD,CAAOH,aAAcA,EAAcjC,aAAcA,GAC/C,kBAACqC,EAAA,EAAD,CAAUC,KAAK,aAAaC,KAAM9C,MCClB+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzB,GACL0B,QAAQ1B,MAAMA,EAAM2B,c","file":"static/js/main.652ec9b2.chunk.js","sourcesContent":["import React from 'react';\nimport { List, Datagrid, TextField } from 'react-admin';\n\nexport const CategoryList = (props) => (\n    <List {...props}>\n        <Datagrid>\n            <TextField source=\"id\" />\n            <TextField source=\"name\" />\n            <TextField source=\"createdDate\" />\n            <TextField source=\"imgUrl\" />\n        </Datagrid>\n    </List>\n);","export const API_URL = process.env.NODE_ENV === 'production' ? 'https://us-central1-arenawallpaper.cloudfunctions.net/api' : 'http://localhost:5000/arenawallpaper/us-central1/api'","import { API_URL } from './constants/api'\n\nconst authProvider = {\n  login: ({ username, password }) =>  {\n      const request = new Request(API_URL + '/login?isAdmin=true', {\n          method: 'POST',\n          body: JSON.stringify({ username, password }),\n          headers: new Headers({ 'Content-Type': 'application/json' }),\n      });\n      return fetch(request)\n          .then(response => {\n              if (response.status < 200 || response.status >= 300) {\n                  throw new Error(response.statusText);\n              }\n              return response.json();\n          })\n          .then(({ token }) => {\n              localStorage.setItem('token', token);\n          });\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    return Promise.resolve();\n  },\n  checkAuth: () => localStorage.getItem('token')\n        ? Promise.resolve()\n        : Promise.reject(),\n  checkError: (error) => {\n    const status = error.status;\n    if (status === 401 || status === 403) {\n        localStorage.removeItem('token');\n        return Promise.reject();\n    }\n    return Promise.resolve();\n  },\n  getPermissions: params => Promise.resolve(),\n};\n\nexport default authProvider;","import React from 'react';\nimport { Admin, Resource } from 'react-admin';\nimport jsonServerProvider from 'ra-data-json-server';\nimport { CategoryList } from './components/CategoryList'\nimport authProvider from './authProvider'\nimport { API_URL } from './constants/api'\n\nconst dataProvider = jsonServerProvider(API_URL);\n\nconst App = () => (\n  <Admin dataProvider={dataProvider} authProvider={authProvider} >\n    <Resource name=\"categories\" list={CategoryList}/>\n  </Admin>  \n)\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}